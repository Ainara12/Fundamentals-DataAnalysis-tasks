{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fundamentals of Data Analysis  MODULE TASKS 2020\n",
    "\n",
    "In this notebook I am listing the 4 tasks to complete for this Fundamentals of Data Analysis module.\n",
    "\n",
    "Table of contents:\n",
    "\n",
    "- Task 1.\n",
    "- Task 2.\n",
    "- Task 3.\n",
    "- Task 4.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1. 'Counts':\n",
    "\n",
    "\n",
    "For this module's first task I am playing around with Jupyter Notebooks by creating a function called 'Counts' \n",
    "which takes a list as input and returns a dictionary of unique items in the list as keys and the number of\n",
    "#times each item appears as values.We are not allowed to use built in modules\n",
    "\n",
    "References\n",
    "\n",
    " - https://www.programiz.com/python-programming/methods/string/count#:~:text=In%20simple%20words%2C%20count(),string.\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "Mylist=['A','A','B','C','A']\n",
    "\n",
    "Mydictionary = {}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "       \n",
    "        \n",
    "        \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2. 'Dicerolls':\n",
    "\n",
    "For this task we are asked to create a function called 'dicerolls' that simulates a rolling dice. The function takes 2 parameters number of dice 'k' and the number of times to roll the dice 'n'. Function will simulate randomly rolling dice and keep track of each total face value\n",
    "so it then returns a dictionary with the number of times each possible total face value occurred. \n",
    "\n",
    "\n",
    "References:\n",
    "\n",
    "- numpy.random.randint documentation:https://numpy.org/doc/stable/reference/random/generated/numpy.random.randint.html?highlight=random%20randint#numpy.random.randint\n",
    "\n",
    "- Random library documentation: https://docs.python.org/3.1/library/random.html \n",
    "\n",
    "https://medium.com/@diskokarl/how-to-roll-dice-with-python-34865d83f53d\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2 5 5 3 4 1 5 2 2 4 3 2 3 3 6 2 2 5 6 6 2 5 5 2 4 6 3 5 6 3 1 5 1 6 6 5 5\n",
      " 4 5 5 4 1 3 5 6 6 2 4 6 5 4 4 3 3 4 2 2 4 6 1 3 3 2 1 1 6 4 3 1 6 4 5 4 4\n",
      " 4 4 4 4 1 5 2 5 6 4 1 4 4 3 4 4 1 6 5 4 5 2 4 5 6 2 6 2 2 6 1 4 2 3 4 3 3\n",
      " 6 3 6 1 3 3 2 3 2 5 3 2 6 3 5 5 5 6 1 6 1 3 5 5 3 1 4 5 1 4 5 1 6 5 2 3 6\n",
      " 4 5 6 6 2 4 5 4 5 3 1 2 6 3 3 2 4 3 1 5 3 4 2 6 6 6 3 6 5 5 1 4 1 3 1 6 2\n",
      " 6 2 1 6 4 5 6 1 5 2 1 6 6 5 4 3 2 1 1 5 6 6 4 1 6 2 2 5 5 6 6 4 6 4 4 1 4\n",
      " 6 1 2 2 2 4 5 5 5 1 4 3 4 1 2 5 1 2 3 3 3 5 5 2 5 3 3 1 1 5 5 5 5 6 4 6 2\n",
      " 3 4 5 6 4 5 6 5 1 6 4 5 6 6 5 3 5 3 1 1 5 4 1 6 5 4 1 3 6 4 4 2 3 2 3 1 2\n",
      " 4 3 4 6 1 4 6 5 4 4 6 4 4 5 2 2 1 5 4 4 1 1 6 5 4 5 4 5 1 1 4 3 1 1 6 6 5\n",
      " 3 5 3 3 2 3 3 4 4 2 2 6 4 6 3 5 3 5 2 4 1 3 2 6 5 4 3 1 4 2 2 2 5 2 3 6 5\n",
      " 5 4 4 2 5 3 4 4 4 3 5 1 3 4 1 6 4 1 6 4 3 3 2 1 3 2 5 3 6 6 6 6 3 1 1 5 1\n",
      " 5 3 1 2 5 4 2 1 2 4 1 6 6 6 4 5 6 6 4 4 6 3 5 6 1 4 5 2 6 5 3 1 1 5 6 4 2\n",
      " 6 3 5 1 4 1 2 6 5 2 1 3 3 3 3 6 2 5 6 1 1 4 5 2 3 1 6 4 6 6 3 4 6 3 2 4 4\n",
      " 1 2 6 3 5 3 1 3 1 6 3 6 2 3 2 1 5 3 5 5 4 2 5 4 4 6 6 6 5 6 3 6 1 4 4 6 1\n",
      " 2 6 2 5 3 6 1 5 5 1 1 1 5 2 1 4 4 3 3 3 2 5 1 5 6 6 5 2 4 5 4 3 1 6 6 1 4\n",
      " 3 3 1 4 3 4 2 5 4 5 1 5 3 1 4 1 2 3 4 5 1 3 2 2 4 5 3 4 4 5 2 6 1 4 4 2 6\n",
      " 2 5 5 5 1 2 5 3 2 2 6 3 5 3 1 2 5 3 3 1 1 4 3 4 4 4 6 6 1 1 1 6 3 3 5 4 5\n",
      " 5 3 2 6 2 5 5 3 4 3 4 2 6 4 6 1 3 1 2 4 4 1 3 1 6 2 2 3 4 6 2 1 3 4 5 1 1\n",
      " 3 4 1 2 6 5 4 4 4 5 2 5 6 3 1 4 3 2 3 6 4 5 1 1 6 3 4 4 1 2 4 4 1 1 4 2 6\n",
      " 4 6 3 2 4 5 6 4 6 5 3 1 1 1 6 2 1 1 6 3 5 5 1 5 1 1 3 6 1 4 1 5 3 5 2 3 4\n",
      " 4 5 2 6 6 5 4 5 5 2 6 2 1 3 4 1 2 3 3 1 4 3 3 3 6 3 6 2 3 4 2 3 5 3 6 5 1\n",
      " 2 2 4 5 5 2 6 4 2 5 4 6 5 5 1 3 2 5 4 6 3 2 3 4 6 6 1 3 3 6 2 6 2 3 3 4 2\n",
      " 4 1 5 4 6 1 6 5 6 3 6 5 6 2 6 5 3 3 5 3 5 6 6 4 5 1 3 5 6 2 3 4 1 1 5 3 1\n",
      " 1 4 4 6 2 5 4 5 3 4 3 3 3 6 6 6 5 1 4 3 1 4 2 5 2 1 6 2 3 5 1 3 4 1 5 4 6\n",
      " 5 4 1 6 3 6 5 3 4 2 3 6 2 2 6 2 2 5 6 1 1 4 5 3 5 2 4 2 6 2 3 2 6 2 4 6 3\n",
      " 2 2 4 2 5 1 5 1 3 2 1 1 4 1 3 5 4 4 2 2 4 4 6 2 3 2 3 4 2 3 2 1 5 5 5 4 3\n",
      " 1 3 6 5 5 3 6 4 2 2 1 6 3 1 6 2 5 2 5 5 4 1 5 4 2 4 4 1 3 3 5 6 3 1 1 5 6\n",
      " 4]\n"
     ]
    }
   ],
   "source": [
    "# For this task I am using one of the np.random functions that I learnt in a different module as I see it adjusts to the \n",
    "#requirements to create this function. \n",
    "\n",
    "import numpy as np\n",
    "\n",
    "#With the numpy random randint function we can generate a list of random numbers between 0 and 7 (exclusive)which mimics\n",
    "#the way a rolling dice works and we added n=1000 times as the task requests so we get the possible 1000 faces. \n",
    "\n",
    "np.random.randint (1,7)\n",
    "\n",
    "rollnumber = np.random.randint (1,7,1000)\n",
    "\n",
    "print(rollnumber)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'>=' not supported between instances of 'function' and 'function'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-29-f8c5374daec0>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;31m#Call function:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m \u001b[0mdicerolls\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mn\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-29-f8c5374daec0>\u001b[0m in \u001b[0;36mdicerolls\u001b[1;34m(k, n)\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mdicerolls\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m     \u001b[1;32mglobal\u001b[0m \u001b[0mcount\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m     \u001b[1;32mwhile\u001b[0m \u001b[0mdicerolls\u001b[0m \u001b[1;33m>=\u001b[0m \u001b[0mcount\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mcount\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m         \u001b[0mprint\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mrollnumber\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m         \u001b[0mcount\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcount\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: '>=' not supported between instances of 'function' and 'function'"
     ]
    }
   ],
   "source": [
    "#In order to return these values to a dictionary including the number of times that they appeared we create the function :\n",
    "#First we create two variables for both dices as we need to count the random values generated from both dice. dicea = np.random.randint(1,7,1000)\n",
    "\n",
    "count = dicerolls\n",
    "\n",
    "def dicerolls (k, n):\n",
    "    global count\n",
    "    while dicerolls >= count and count > 0:\n",
    "        print (rollnumber)\n",
    "        count = count-1\n",
    "  \n",
    "\n",
    "#Call function: \n",
    "dicerolls (k=2,n=1000)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
